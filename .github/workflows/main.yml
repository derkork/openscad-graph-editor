# Whenever we push a v* tag we make a new release.
on:
  push:
    branches:
      - new_build_pipeline
    # Sequence of patterns matched against refs/tags
    # tags:
    #  - 'v*' 
  
jobs:
  export:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
      
    name: Export Application 
    steps:
      - name: checkout
        uses: actions/checkout@v3
        # Ensure that you get the entire project history
        with:
          fetch-depth: 0      
      
      - name: get tag from version
        id: tag_version
        run: |
            echo "TAG_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: write version into file
        run: |
          sed -i 's/## Development Build ##/${{steps.tag_version.outputs.TAG_VERSION}}/g' AppVersion.cs

      - name: setup godot
        uses: paulloz/godot-action@v1.2
        with:
          version: 3.5
          mono: true
          export-templates: true
      
      # on OSX install signing certificate
      - name: Install Signing Certificate
        if: matrix.os == 'macos-latest'
        env:
          MACOS_CERTIFICATE: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_BASE64 }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
          MACOS_CERTIFICATE_ID: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_ID }}
        run: |
          echo $MACOS_CERTIFICATE | base64 -d > certificate.p12
          security create-keychain -p "$MACOS_CERTIFICATE_PWD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CERTIFICATE_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CERTIFICATE_PWD" build.keychain
      
      
      - name: Export Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          nuget restore
          mkdir -p builds/linux
          godot --export Linux/X11
          
          
      - name: Export Windows
        if: matrix.os == 'ubuntu-latest'
        run: |
          nuget restore
          mkdir -p builds/windows
          godot --export "Windows Desktop"
          
      - name: Export OSX
        if: matrix.os == 'macos-latest'
        run: |
          nuget restore
          mkdir -p builds/osx
          godot --export "Mac OSX"

      - name: Notarize OSX
        env:
          MACOS_BUNDLE_ID: "de.janthomae.openscadgrapheditor"
          MACOS_APPLE_ID: ${{ secrets.APPLE_ID }}
          MACOS_APPLE_ID_PWD: ${{ secrets.APPLE_ID_PASSWORD }}
          MACOS_APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "Uploading for notarization..."
          cd builds/osx
          zip -r "openscad-graph-editor.app.zip" "openscad-graph-editor.app"
          xcrun notarytool submit "openscad-graph-editor.app.zip" --apple-id "$MACOS_APPLE_ID" --password "$MACOS_APPLE_ID_PWD" --team-id "$MACOS_APPLE_TEAM_ID" --wait --verbose 2>&1
          
          echo "Stapling ticket to app..."
          xcrun stapler staple "openscad-graph-editor.app"
          rm "openscad-graph-editor.app.zip"


      - name: Zip Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir builds/archives
          (cd builds/linux; zip -r ../archives/Linux.zip .)    
        
      - name: Zip Windows
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir builds/archives
          (cd builds/windows; zip -r ../archives/Windows.zip .)
          
      - name: Zip OSX
        if: matrix.os == 'macos-latest'
        run: |
          mkdir builds/archives
          (cd builds/osx; zip -r ../archives/MacOSX.zip .)
          
      - name: Upload Windows build
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: windows
          path: builds/archives/Windows.zip
          
      - name: Upload Linux build  
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: linux
          path: builds/archives/Linux.zip
          
      - name: Upload OSX build
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: osx
          path: builds/archives/MacOSX.zip
          


#      - name: create release
#        uses: softprops/action-gh-release@v0.1.14
#        with:
#          tag_name: ${{ steps.tag_version.outputs.TAG_VERSION }}
#          files: ./builds/archives/*
#          fail_on_unmatched_files: true
#          body: See [CHANGES.md](https://github.com/derkork/openscad-graph-editor/blob/master/CHANGES.md) for details.