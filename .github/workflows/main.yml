# Whenever we push a v* tag we make a new release.
on:
  push:
    branches:
      - new_build_pipeline
    # Sequence of patterns matched against refs/tags
    # tags:
    #  - 'v*' 
  
jobs:
  export:
    runs-on: macos-latest
      
    name: Export Application 
    steps:
      - name: checkout
        uses: actions/checkout@v3
        # Ensure that you get the entire project history
        with:
          fetch-depth: 0      
      
      - name: get tag from version
        id: tag_version
        run: |
            echo "TAG_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    #  - name: write version into file
    #    run: |
     #     VERSION=${{steps.tag_version.outputs.TAG_VERSION}}
     #     sed -i "s/## Development Build ##/$VERSION/g" AppVersion.cs

      # on OSX install signing certificate
      - name: Install Signing Certificate
        env:
          MACOS_CERTIFICATE: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_BASE64 }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
          MACOS_CERTIFICATE_ID: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_ID }}
        run: |
          echo $MACOS_CERTIFICATE | base64 -d > certificate.p12
          security create-keychain -p "$MACOS_CERTIFICATE_PWD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CERTIFICATE_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CERTIFICATE_PWD" build.keychain
          
      # patch export_presets.cfg to use the correct certificate and credentials for notarization
      - name: Patch export_presets.cfg
        env:
          MACOS_CERTIFICATE_ID: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_ID }}
          MACOS_APPLE_ID: ${{ secrets.APPLE_ID }}
          MACOS_APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          MACOS_APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          python .buildtools/replace.py export_presets.cfg "__CODESIGN_IDENTITY__" "$MACOS_CERTIFICATE_ID"
          python .buildtools/replace.py export_presets.cfg "__APPLE_ID__" "$MACOS_APPLE_ID"
          python .buildtools/replace.py export_presets.cfg "__APPLE_ID_PASSWORD__" "$MACOS_APPLE_ID_PASSWORD"
          python .buildtools/replace.py export_presets.cfg "__APPLE_TEAM_ID__" "$MACOS_APPLE_TEAM_ID"
      
      
      - name: Prepare Godot
        env:
          GODOT_VERSION: 3.5.2
          GODOT_URL: https://downloads.tuxfamily.org/godotengine/3.5.2/mono/Godot_v3.5.2-stable_mono_osx.universal.zip
          GODOT_TEMPLATES_URL: https://downloads.tuxfamily.org/godotengine/3.5.2/mono/Godot_v3.5.2-stable_mono_export_templates.tpz
          GODOT_TEMPLATES_DIR: "~/Library/Application Support/Godot/templates"

        run: |
          curl -o ./godot.zip $GODOT_URL
          unzip ./godot.zip
          curl -o ./godot-templates.zip $GODOT_TEMPLATES_URL
          unzip ./godot-templates.zip
          mkdir -p "$GODOT_TEMPLATES_DIR"
          mv templates/* "$GODOT_TEMPLATES_DIR/${GODOT_VERSION}.stable.mono"
     

      - name: Export
        env:
          GODOT_EXEC: ./Godot_mono.app/Contents/MacOS/Godot
        run: |
          mkdir -p ./builds/osx
          mkdir -p ./builds/linux
          mkdir -p ./builds/windows
          $GODOT_EXEC --no-window --export "Mac OSX" 
          $GODOT_EXEC --no-window --export "Linux/X11"
          $GODOT_EXEC --no-window --export "Windows Desktop"
        
      - name: Zip results
        run: |
          mkdir -p ./builds/archives
          cd ./builds/osx && zip -r ../archives/osx.zip .
          cd ./builds/linux && zip -r ../archives/linux.zip .
          cd ./builds/windows && zip -r ../archives/windows.zip .
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: builds
          path: ./builds/archives/*

#      - name: create release
#        uses: softprops/action-gh-release@v0.1.14
#        with:
#          tag_name: ${{ steps.tag_version.outputs.TAG_VERSION }}
#          files: ./builds/archives/*
#          fail_on_unmatched_files: true
#          body: See [CHANGES.md](https://github.com/derkork/openscad-graph-editor/blob/master/CHANGES.md) for details.